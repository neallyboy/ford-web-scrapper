name: Build and Deploy to ACI

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ford-web-scrapper

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    # - name: Get Docker image URL
    #   id: get_image_url
    #   run: |
    #     echo "image_url=ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" >> $GITHUB_STATE
        
    # - name: Set Docker image URL output
    #   run: |
    #     echo "image_url=${{ steps.get_image_url.outputs.image_url }}" >> $GITHUB_OUTPUT


  deploy_dev:
    needs: build
    runs-on: ubuntu-latest
    environment: Development
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Check if Azure Container Instance exists
      id: check_container
      run: |
        result=$(az container show --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} --name ${{ vars.AZURE_CONTAINER_INSTANCE_GROUP }} --query "name" -o tsv 2>/dev/null || echo "")
        echo "container_exists=$(test -z "$result" && echo false || echo true)" >> "$GITHUB_OUTPUT"
  
    - name: Output container_exists
      run: |
        echo "Container exists: ${{ steps.check_container.outputs.container_exists }}"

    - name: Delete Azure Container Instance
      id: delete_container  
      if: steps.check_container.outputs.container_exists == 'true'
      run: |
        az container delete --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} --name ${{ vars.AZURE_CONTAINER_INSTANCE_GROUP }} --yes && echo "name=container_deleted::true" >> "$GITHUB_OUTPUT"

    - name: Generate config file
      run: |
        chmod +x generate-container-config.sh
        GITHUB_TOKEN="${{ secrets.FIREFOX_GITHUB_TOKEN }}" EMAIL_PASSWORD="${{ secrets.EMAIL_PASSWORD }}" ./generate-container-config.sh "${{ vars.AZURE_CONTAINER_INSTANCE_GROUP }}" "ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }}" "${{ vars.EMAIL_ERROR_RECIEVER }}" "${{ vars.EMAIL_ERROR_SUBJECT }}" "${{ vars.EMAIL_SUBJECT }}" "${{ vars.EMAIL_RECIEVER }}" "${{ vars.EMAIL_SENDER }}" "${{ vars.EMAIL_BCC }}"
  
    - name: Deploy to Azure Container Instances (ACI) - Dev
      if: steps.check_container.outputs.container_exists == 'false' || steps.delete_container.outputs.container_deleted == 'true'
      run: |
        az container create --resource-group ${{ vars.AZURE_RESOURCE_GROUP }} --name ${{ vars.AZURE_CONTAINER_INSTANCE_GROUP }} --registry-login-server ghcr.io --registry-username ${{ secrets.REGISTRY_USERNAME }} --registry-password ${{ secrets.REGISTRY_PASSWORD }} --file container-config.yaml

#   deploy_staging:
#     needs: deploy_dev
#     runs-on: ubuntu-latest
#     environment: Staging
#     steps:
#     - name: Login to Azure
#       uses: azure/login@v1
#       with:
#         creds: ${{ secrets.AZURE_CREDENTIALS }}

#     - name: Deploy to Azure Container Instances (ACI) - Staging
#       run: |
#         az container create --resource-group stagingResourceGroup --name stagingContainerGroup --image ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --dns-name-label stagingContainerGroup --ports 80

#   deploy_prod:
#     needs: deploy_staging
#     runs-on: ubuntu-latest
#     environment: Production
#     steps:
#     - name: Login to Azure
#       uses: azure/login@v1
#       with:
#         creds: ${{ secrets.AZURE_CREDENTIALS }}

#     - name: Deploy to Azure Container Instances (ACI) - Production
#       run: |
#         az container create --resource-group prodResourceGroup --name prodContainerGroup --image ghcr.io/${{ github.repository }}/${{ env.IMAGE_NAME }}:${{ github.sha }} --dns-name-label prodContainerGroup --ports 80